from numpy import loadtxt
import matplotlib.pyplot as plt
import math
from trajectory import *
import argparse


#Argument parser
parser = argparse.ArgumentParser(description='Droplet Trajectory Simulator')
parser.add_argument('-maps_folder', dest='maps_folder',default="maps", required=False, help='Name of the folder that contains the maps generated by the Velocity_Map_Generator')
parser.add_argument('-droplet_density', dest='droplet_density',default=997, required=False, help='The density of the droplet in kg/m^3')
parser.add_argument('-droplet_radius', dest='droplet_radius',default=5, required=False, help='The radius of the droplet in µm')
parser.add_argument('-starting_x_coord', dest='starting_x_coord',default=False, required=False, help='X coordinate of the starting point of the droplet in mm')
parser.add_argument('-starting_point_to_center', dest='starting_point_to_center',default=False, required=False, help='Horizontal distance between the center of the primary branch and the starting point of the droplet (0 indicates the center) in mm')
parser.add_argument('-starting_x_velocity', dest='starting_x_velocity',default=0, required=False, help='X component of the starting velocity of the droplet')
parser.add_argument('-starting_y_velocity', dest='starting_y_velocity',default=0, required=False, help='Y component of the starting velocity of the droplet')
args = parser.parse_args()


# Loading data
print("Begin loading all maps ...")
binary_map = loadtxt('./{}/binary_map.csv'.format(args.maps_folder), delimiter=',')
velocity_map_x = loadtxt('./{}/datax.csv'.format(args.maps_folder), delimiter=',')
velocity_map_y = loadtxt('./{}/datay.csv'.format(args.maps_folder), delimiter=',')
d1,d2,Rc,rc,teta,visct,pi,po,step = loadtxt('./{}/metadata.csv'.format(args.maps_folder), delimiter=',')

# Print maps' parameters
maps_table = f"""
Maps' parameters :
| Parameter                  | Value
|----------------------------|--------------------
| Primary diameter (mm)      | {d1*10**3}
| Secondary diameter (mm)    | {d2*10**3}
| Inner curvature radius (mm)| {Rc*10**3}
| Outer curvature radius (mm)| {rc*10**3}
| Angle (degrees)            | {teta}
| Viscosity (Pa.s)           | {visct}
| Inlet pressure (Pa)        | {pi}
| Outlet pressure (Pa)       | {po}
| Step (mm)                  | {step*10**3}
"""
print(maps_table)
print("End loading all maps\n")



# Adapt all droplet's parameters

args.droplet_density=float(args.droplet_density)

args.droplet_radius=float(args.droplet_radius)
args.droplet_radius*=10**(-6)

if args.starting_x_coord == False :
    args.starting_x_coord = step;
else :
    args.starting_x_coord = float(args.starting_x_coord)*10**(-3)

if args.starting_point_to_center == False :
    starting_y_coord = (len(binary_map[0])/2)*step;
else :
    args.starting_point_to_center = float(args.starting_point_to_center)*10**(-3)
    starting_y_coord = (len(binary_map[0])/2)*step - args.starting_point_to_center;

if args.starting_x_velocity != 's':
    args.starting_x_velocity=float(args.starting_x_velocity)
if args.starting_y_velocity != 's':
    args.starting_y_velocity=float(args.starting_y_velocity)


# Print droplet's parameters
droplet_table = f"""
Droplet's parameters :
| Parameter                  | Value
|----------------------------|--------------------
| Droplet density (kg/m^3)   | {args.droplet_density}
| Droplet radius (µm)        | {args.droplet_radius*10**6}
| Starting X coordinate (mm) | {args.starting_x_coord*10**3}
| Starting Y coordinate (mm) | {starting_y_coord*10**3}
| Starting X velocity (m/s)  | {args.starting_x_velocity}
| Starting Y velocity (m/s)  | {args.starting_y_velocity}
"""
print(droplet_table)


# Compute the path of the droplet
trajectory_instance = trajectory(binary_map,velocity_map_x,velocity_map_y,visct,step)

path = trajectory_instance.compute(args.droplet_density,args.droplet_radius,args.starting_x_coord,starting_y_coord,args.starting_x_velocity,args.starting_y_velocity)

# Display the path of the droplet
path[0]=[path[0][i]/step for i in range (len(path[0]))]
path[1]=[path[1][i]/step for i in range (len(path[1]))]
plt.imshow((velocity_map_x**2+velocity_map_y**2).T)
plt.plot(path[0],path[1], 'w-')
plt.title('Droplet Trajectory')
plt.show()
