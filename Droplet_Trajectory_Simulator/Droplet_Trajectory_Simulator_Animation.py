from numpy import loadtxt
import matplotlib.pyplot as plt

import math
import argparse

from trajectory import *



#Argument parser
parser = argparse.ArgumentParser(description='Droplet Trajectory Simulator')
parser.add_argument('-maps_folder', dest='maps_folder',default="maps", required=False, help='Name of the folder that contains the maps generated by the Velocity_Map_Generator')
parser.add_argument('-droplet_density', dest='droplet_density',default=997, required=False, help='The density of the droplet in kg/m^3')
parser.add_argument('-droplet_radius', dest='droplet_radius',default=5, required=False, help='The radius of the droplet in µm')
parser.add_argument('-starting_x_velocity', dest='starting_x_velocity',default='s', required=False, help='X component of the starting velocity of the droplet')
parser.add_argument('-starting_y_velocity', dest='starting_y_velocity',default='s', required=False, help='Y component of the starting velocity of the droplet')
args = parser.parse_args()

# Loading data
print("Begin loading all maps ...")

binary_map = loadtxt('./{}/binary_map.csv'.format(args.maps_folder), delimiter=',')
velocity_map_x = loadtxt('./{}/datax.csv'.format(args.maps_folder), delimiter=',')
velocity_map_y = loadtxt('./{}/datay.csv'.format(args.maps_folder), delimiter=',')
d1,d2,Rc,rc,teta,visct,pi,po,step = loadtxt('./{}/metadata.csv'.format(args.maps_folder), delimiter=',')
# Print maps' parameters
maps_table = f"""
Maps' parameters :
| Parameter                  | Value
|----------------------------|--------------------
| Primary diameter (mm)      | {d1*10**3}
| Secondary diameter (mm)    | {d2*10**3}
| Inner curvature radius (mm)| {Rc*10**3}
| Outer curvature radius (mm)| {rc*10**3}
| Angle (degrees)            | {teta}
| Viscosity (Pa.s)           | {visct}
| Inlet pressure (Pa)        | {pi}
| Outlet pressure (Pa)       | {po}
| Step (mm)                  | {step*10**3}
"""
print(maps_table)
print("End loading all maps\n")


# Adapt all droplet's parameters

args.droplet_density=float(args.droplet_density)

args.droplet_radius=float(args.droplet_radius)
args.droplet_radius*=10**(-6)

if args.starting_x_velocity != 's':
    args.starting_x_velocity=float(args.starting_x_velocity)
if args.starting_y_velocity != 's':
    args.starting_y_velocity=float(args.starting_y_velocity)

# Print droplet's parameters
droplet_table = f"""
Droplet's parameters :
| Parameter                  | Value
|----------------------------|--------------------
| Droplet density (kg/m^3)   | {args.droplet_density}
| Droplet radius (µm)        | {args.droplet_radius*10**6}
| Starting X velocity (m/s)  | {args.starting_x_velocity}
| Starting Y velocity (m/s)  | {args.starting_y_velocity}
"""
print(droplet_table)

trajectory_instance = trajectory(binary_map,velocity_map_x,velocity_map_y,visct,step)



pathsx=[]
maxx=0
pathsy=[]
maxy=0
pathse=[]

number_of_droplet_each_stepsize = 1

for j in range(1,int(d1/step*number_of_droplet_each_stepsize)) :
   
    path = trajectory_instance.compute(args.droplet_density,args.droplet_radius,step,(len(binary_map[0])*step)/2-d1/2+(j/number_of_droplet_each_stepsize)*step,args.starting_x_velocity,args.starting_y_velocity)
    path[0]=[path[0][i]/step for i in range (len(path[0]))]
    path[1]=[path[1][i]/step for i in range (len(path[1]))]

    pathsx.append(path[0])
    if maxx<len(path[0]) :
        maxx=len(path[0])
    
    pathsy.append(path[1])
    pathse.append(path[2])


plt.pause(1)

# Start Animation
step_animation=5

fig, ax = plt.subplots()
ax.imshow((velocity_map_x**2+velocity_map_y**2).T)
def on_close(event):
    print("Matplotlib window closed. Exiting.")
    plt.close()
    exit()

for j in range(0,maxx+step_animation,step_animation):  
    x=[]
    y=[]
    for i in range(len(pathsx)):
        if j<len(pathsx[i]) :
            x.append(pathsx[i][j])
            y.append(pathsy[i][j])
        elif pathse[i]==0 :
        
            x.append(pathsx[i][len(pathsx[i])-1])
            y.append(pathsy[i][len(pathsx[i])-1])
    
    if not plt.fignum_exists(1):
        break
    if j==0 :
        line, = ax.plot(x, y, 'wo', markersize=5)
        plt.title("Droplets Trajectories Simulation (from different starting points)\n t= {:.2f}ms".format(j*trajectory_instance.get_time_step()*10**3))
        fig.canvas.mpl_connect('close_event', on_close)

    else :
        line.set_ydata(y)
        line.set_xdata(x)
        plt.title("Droplets Trajectories Simulation (from different starting points)\n t= {:.2f}ms".format(j*trajectory_instance.get_time_step()*10**3))
    plt.pause(0.01)
    plt.savefig("animation/{}.png".format(int(j/step_animation)))

plt.close()

